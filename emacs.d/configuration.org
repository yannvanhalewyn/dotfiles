* General emacs stuff
** Custom.el

   Set up a different cutom file for ~custom.el~ so we don't have to check in all those random automatically added code snippets.

   #+BEGIN_SRC emacs-lisp
   (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
   (unless (file-exists-p custom-file)
   (write-region "" nil custom-file))
   (load custom-file)
   #+END_SRC

** Garbage collection

   Allow 20MB of memory (instead of 0.76MB) before calling garbage collection. This means GC runs less often, which speeds up some operations.

   #+BEGIN_SRC emacs-lisp
   (setq gc-cons-threshold 20000000)
   #+END_SRC

** Hide splash screen

   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC

** Silence bell

   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC

** No backup files

   #+BEGIN_SRC emacs-lisp
   (setq make-backup-files nil)
   (setq create-lockfiles nil)
   (auto-save-mode nil)
   #+END_SRC

** Just type y or n

   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Deal with temp files

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+END_SRC

** Add brews and /usr/local/bin to exec path

   #+BEGIN_SRC emacs-lisp
   (let ((paths "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"))
     (setenv "PATH" paths)
     (setq eshell-path-env paths))
   (add-to-list 'exec-path "/usr/local/bin")
   #+END_SRC

** Save minibuffer history

   #+BEGIN_SRC emacs-lisp
   (require 'savehist)
   (savehist-mode t)
   #+END_SRC

** Quitting minibuffer with ESC

   Make ESC quit various types of minibuffers. Without this you need 3 esc hits to quit them.

   #+BEGIN_SRC emacs-lisp
   (defun minibuffer-keyboard-quit ()
     "Abort recursive edit.
   In Delete Selection mode, if the mark is active, just deactivate it;
   then it takes a second \\[keyboard-quit] to abort the minibuffer."
     (interactive)
     (if (and delete-selection-mode transient-mark-mode mark-active)
         (setq deactivate-mark  t)
       (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
       (abort-recursive-edit)))
   (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
   (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
   #+END_SRC

** Setup alt key as meta on emacs-macport

   #+BEGIN_SRC emacs-lisp
   (setq mac-option-modifier 'meta)
   (setq mac-command-modifier 'super)
   (setq mac-pass-command-to-system t)
   #+END_SRC

** Winner mode

   Easily navigate window configurations history (bound to [w and ]w)

   #+BEGIN_SRC emacs-lisp
   (when (fboundp 'winner-mode)
     (winner-mode 1))
   #+END_SRC

* Buffers
** Auto newlines at end of buffer

   #+BEGIN_SRC emacs-lisp
   (setq require-final-newline t)
   #+END_SRC

** Warn when opening large files

   #+BEGIN_SRC emacs-lisp
   (setq large-file-warning-threshold 100000000)
   #+END_SRC

** Auto clear trailing whitespace

   Custom function in init-functions.el. This will remove any trailing whitespace and fix tabs <> spaces before saving the buffer.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Auto revert buffers when changes on file system

   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+END_SRC

** Auto save buffer when leaving insert mode

   #+BEGIN_SRC emacs-lisp
   (defun set-save-hook ()
     (interactive)
     (add-hook 'evil-insert-state-exit-hook 'save-if-code-buffer))

   (defun clear-save-hook ()
     (interactive)
     (remove-hook 'evil-insert-state-exit-hook 'save-if-code-buffer))

   (set-save-hook)
   #+END_SRC

** Prevent # -*- coding: utf-8 -*-

   #+BEGIN_SRC emacs-lisp
   (setq ruby-insert-encoding-magic-comment nil)
   #+END_SRC

** Indentation

   Prefer spaces over tabs

   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC

   Set indentations for various languages

   #+BEGIN_SRC emacs-lisp
   (setq js-indent-level 2
         css-indent-offset 2
         c-basic-offset 4
         css-indent-offset 2)
   #+END_SRC

   Set default indentation, when file contains tabs be displayed as 2 spaces instead of 8

   #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 2)
   #+END_SRC

** Remember cursor position when opening files

   #+BEGIN_SRC emacs-lisp
   (setq save-place-file (locate-user-emacs-file "places"))
   (setq-default save-place t)
   (require 'saveplace)
   (save-place-mode 1)
   #+END_SRC

** Always follow symlinks

   #+BEGIN_SRC emacs-lisp
   (setq vc-follow-symlinks t)
   #+END_SRC

** Scratch buffer in eLisp

   #+BEGIN_SRC emacs-lisp
   (setq initial-major-mode 'emacs-lisp-mode)
   #+END_SRC

** Centering after jumping paragraphs

   #+BEGIN_SRC emacs-lisp
   (setq scroll-margin 3
         scroll-conservatively 9999
         scroll-step 1)
   #+END_SRC

** Don't confirm when creating new file

   #+BEGIN_SRC emacs-lisp
   (setq confirm-nonexistent-file-or-buffer nil)
   #+END_SRC

** Scroll in compilation mode

   #+BEGIN_SRC emacs-lisp
   (setq compilation-scroll-output t)
   #+END_SRC

** C++ header files

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
   #+END_SRC

** Open common config files with conf mode

   #+BEGIN_SRC emacs-lisp
   (let* ((conf-files '("aliases" "functions" "gitignore" "rc"))
          (conf-regexp (concat (regexp-opt conf-files t) "\\'")))
     (add-to-list 'auto-mode-alist (cons conf-regexp 'conf-mode)))
   #+END_SRC

** Get colorized compilation buffers

   Useful for various test runners that use compilation buffers, like the mocha test runner.

   #+BEGIN_SRC emacs-lisp
   (require 'ansi-color)
   (defun colorize-compilation-buffer ()
     (toggle-read-only)
     (ansi-color-apply-on-region compilation-filter-start (point))
     (toggle-read-only))
   (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+END_SRC

* Layout
** Setup theme and font

   #+BEGIN_SRC emacs-lisp
   (use-package monokai-theme :init (load-theme 'monokai t))
   (set-face-attribute 'default nil :font "Menlo" :height 155)
   #+END_SRC

** Use rich icons

   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)
   #+END_SRC

** Setup modeline

   Custom packages, ci-status fetches the current status from CI using hub, and can be displayed in the modeline

   #+BEGIN_SRC emacs-lisp
   (require 'ci-status)
   (require 'init-modeline)
   (add-hook 'magit-status-mode-hook 'cis/update)
   #+END_SRC

** Highlight current line

   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   #+END_SRC

** Show matching paren

   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC

** Interface

   Hide menu bar

   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode 0)
   #+END_SRC

   Hide toolbar, scroll bars and setup smaller fringe in GUI version

   #+BEGIN_SRC emacs-lisp
   (if window-system
       (progn (scroll-bar-mode -1)
              (tool-bar-mode -1)
              (fringe-mode 10)))
   #+END_SRC

* Packages
** Package.el

  Set up package.el and point it to stable melpa repositories.

  #+BEGIN_SRC emacs-lisp
   (require 'package)

   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

   (package-initialize)
  #+END_SRC

  Install ~use-package~

  #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   (setq use-package-verbose nil
         use-package-always-ensure t)
  #+END_SRC
** General (keybindings)

   [[https://github.com/noctuid/general.el][General.el]] is an amazing tool to manage keybindings. It can create definers with prefixes, which are a great replacement for evil-leader.

   #+BEGIN_SRC emacs-lisp
   (use-package general
     :config
     (setq default-states '(normal emacs motion))

     (general-define-key :states 'motion "SPC" nil)
     (general-create-definer keys-l :prefix "SPC" :states default-states)
     (general-create-definer keys :states default-states)

     (keys "M-x" 'counsel-M-x
       "C-=" 'text-scale-increase
       "C--" 'text-scale-decrease)

     (keys :prefix "g"
       "t" (find-file-i 'gtd-main)
       "i" (find-file-i 'gtd-inbox)
       "s" (find-file-i 'gtd-someday))

     (keys-l :keymaps '(emacs-lisp-mode-map scheme-mode-map)
       "e" 'eval-defun
       "E" 'eval-buffer)

     (keys-l
       "a" (build-keymap
            "a" 'org-agenda
            "t" 'org-todo-list
            "c" '(lambda () (interactive) (org-capture nil "t"))
            "C" 'calc-dispatch)
       "B" 'ibuffer
       "b" 'ivy-switch-buffer
       "c" (build-keymap
            "u" 'cis/update
            "o" 'cis/open-ci-build
            "t" 'comment-as-title
            "T" 'comment-as-title--bm)
       "d" 'dired-current-dir
       "f" (build-keymap
            "r" 'counsel-recentf
            "m" 'rename-current-buffer-file
            "c" 'copy-current-buffer-file
            "d" 'delete-current-buffer-file
            "s" 'save-buffer
            "S" 'save-some-buffers
            "j" 'junk-file/new
            "J" 'junk-file/find)
       "v" (build-keymap
            "e" 'edit-evil
            "f" 'edit-functions
            "g" 'edit-general-behavior
            "l" 'edit-layout
            "p" 'edit-packages)
       "h" (build-keymap
            "a" 'counsel-apropos
            "f" 'describe-function
            "K" 'which-key-show-top-level
            "k" 'describe-key
            "m" 'describe-mode
            "p" 'describe-package
            "v" 'describe-variable)
       "i" (build-keymap
            "u" 'insert-char)
       "o" 'counsel-find-file
       "Q" 'delete-other-windows
       "q" 'kill-this-buffer
       "R" 'chrome-reload
       "S" 'shell
       "s" (build-keymap
            "s" 'shell
            "k" 'shell-clear-buffer)
       "w" 'buff-swap
       "x" 'counsel-projectile-ag
       "X" 'ag))
   #+END_SRC
** Dired

   #+BEGIN_SRC emacs-lisp
   (require 'dired)
   #+END_SRC

   Kill dired buffer when quitting

   #+BEGIN_SRC emacs-lisp
   (keys :keymaps 'dired-mode-map "q" 'kill-this-buffer)
   #+END_SRC

   Human readable units

   #+BEGIN_SRC emacs-lisp
   (setq-default dired-listing-switches "-alh")
   #+END_SRC

** iBuffer

   Setup better filtering groups

   #+BEGIN_SRC emacs-lisp
   (setq ibuffer-saved-filter-groups
         (quote (("default"
                  ("code" (or (mode . clojure-mode)
                              (mode . clojurec-mode)
                              (mode . c-mode)
                              (mode . ruby-mode)
                              (mode . javascript-mode)
                              (mode . java-mode)
                              (mode . js-mode)
                              (mode . coffee-mode)
                              (mode . clojurescript-mode)))
                  ("emacs" (or (name . "^\\*scratch\\*$")
                               (name . "^\\*Messages\\*$")
                               (name . "^\\*Completions\\*$")))
                  ("configs" (or (mode . emacs-lisp-mode)
                                 (mode . org-mode)
                                 (mode . conf-mode)))
                  ("Magit" (name . "magit"))
                  ("Help" (or (name . "\*Help\*")
                              (name . "\*Apropos\*")
                              (name . "\*info\*")))
                  ("tmp" (or (mode . dired-mode)
                             (name ."^\\*")))))))

   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
             (lambda ()
               (ibuffer-switch-to-saved-filter-groups "default")))
   #+END_SRC

** Diminish

   Hides some modes from the modeline. Integrates with `use-package`

   #+BEGIN_SRC emacs-lisp
   (use-package diminish)
   #+END_SRC

** Evil

   What would we do without [[https://github.com/emacs-evil/evil][Evil]]

   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :init
     (setq evil-want-fine-undo t)
     (add-hook #'after-change-major-mode-hook
               (lambda () (interactive)
                 (modify-syntax-entry ?_ "w")))

     :config
     (evil-mode t)

     (evil-add-hjkl-bindings package-menu-mode-map 'emacs)
     (evil-add-hjkl-bindings ibuffer-mode-map 'emacs)

     (keys
       "[e" 'flycheck-previous-error
       "]e" 'flycheck-next-error
       "[b" 'previous-code-buffer
       "]b" 'next-code-buffer
       "]t" 'cycle-theme
       "[w" 'winner-undo
       "]w" 'winner-redo)

     (keys
       "C-h" 'evil-window-left
       "C-j" 'evil-window-down
       "C-k" 'evil-window-up
       "C-l" 'evil-window-right
       "j"   'evil-next-visual-line
       "k"   'evil-previous-visual-line)

     (use-package evil-nerd-commenter
       :diminish evil-commentary-mode
       :init
       (keys "gc" 'evilnc-comment-operator)
       (keys-l
         "c y" 'evilnc-copy-and-comment-lines))

     (use-package evil-surround
       :config (global-evil-surround-mode 1))

     (use-package evil-cleverparens
       :defer t
       :diminish evil-cleverparens-mode
       :config
       ;; Evil CP overwrites "c" for change. This will re-enable "cs"
       ;; motion "change surrounding" of evil-surround
       (evil-cp--enable-surround-operators)
       :init
       ;; Don't use crazy bindings for {, [, } and ] from evil-cleverparens
       (setq evil-cleverparens-use-additional-movement-keys nil))

     (use-package evil-numbers
       :config
       (keys :prefix "g"
         "a" 'evil-numbers/inc-at-pt
         "x" 'evil-numbers/dec-at-pt)))
   #+END_SRC

** Magit

   The killer app for Emacs

   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :defer t
     :init
     (keys-l "g" (build-keymap
                  "b" 'magit-blame
                  "c" 'magit-checkout
                  "C" 'magit-branch-and-checkout
                  "d" 'vc-diff
                  "D" 'magit-diff
                  "f" 'magit-find-file
                  "F" 'magit-pull-from-pushremote
                  "l" 'magit-log-head
                  "L" 'magit-log-popup
                  "m" 'magit-merge
                  "M" 'magit-merge-popup
                  "o" 'browse-current-line-github
                  "p" 'magit-push-current-to-pushremote
                  "P" 'force-push-with-lease
                  "r" (build-keymap
                       "a" 'magit-rebase-abort
                       "c" 'magit-rebase-continue
                       "i" 'magit-rebase-interactive
                       "r" 'magit-rebase
                       "s" 'magit-rebase-skip)
                  "s" 'magit-status
                  "S" 'magit-stash))

     :config
     (use-package evil-magit)
     (add-hook 'git-commit-mode-hook 'evil-insert-state)
     ;; Refresh VC state for modeline when magit refreshes
     (add-hook 'magit-refresh-buffer-hook 'vc-refresh-state)

     ;; Enable leader keys in revision buffers
     (general-def magit-revision-mode-map "SPC" nil)

     (keys :keymaps '(magit-revision-mode-map diff-mode-map)
       :states 'visual
       "y" 'yank-from-revision-buffer)
     (keys :keymaps 'magit-blame-mode-map "q" 'magit-blame-quit)
     (keys :keymaps 'git-rebase-mode-map "q" 'magit-rebase-abort)
     (keys :keymaps 'magit-status-mode-map "K" 'magit-discard))
   #+END_SRC

   Potentially setup github integration from Magit's interface

   #+BEGIN_SRC emacs-lisp
   (use-package magithub
     :after magit
     :defer t
     :config (magithub-feature-autoinject t))
   #+END_SRC

** Company (autocompletion)

   #+BEGIN_SRC emacs-lisp
   (use-package company
     :diminish company-mode
     :init (global-company-mode)
     :config
     (setq company-idle-delay 0.1)
     (keys :states 'insert
       "<tab>" 'company-complete-common-or-cycle)
     (general-def 'company-active-map
       "C-s" 'company-filter-candidates
       "<tab>" 'company-complete-common-or-cycle
       "S-<tab>" 'company-select-previous-or-abort))
   #+END_SRC

** Yasnippet

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :diminish yas-minor-mode
     :config
     (yas-global-mode 1)
     (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
     (keys :states '(insert)
       "S-<tab>" 'yas-expand))
    #+END_SRC

** Ace jump

   #+BEGIN_SRC emacs-lisp
   (use-package ace-jump-mode
     :defer t
     :init
     (keys-l
       "SPC" 'ace-jump-mode
       "S-SPC" 'ace-jump-char-mode))
    #+END_SRC

** Undo-tree

   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :diminish undo-tree-mode
     :config (global-undo-tree-mode t))
   #+END_SRC

** Which-key

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :diminish which-key-mode
     :config
     (which-key-mode +1)
     (setq which-key-idle-delay 0.5)
     (which-key-setup-side-window-bottom)
     (which-key-add-key-based-replacements
       "SPC a" "Applications"
       "SPC c" "Cider / CI / Comment"
       "SPC f" "Files"
       "SPC g" "Git"
       "SPC g r" "Rebase"
       "SPC h" "Help"
       "SPC i" "Insert"
       "SPC p" "Project"
       "SPC s" "Sexp / Shell"
       "SPC v" "View configuration"))
    #+END_SRC

** Ruby/Rails

   #+BEGIN_SRC emacs-lisp
   (use-package haml-mode :defer t)
   (use-package yaml-mode :defer t)
   (use-package css-mode :defer t)
   (use-package sass-mode :defer t)
   (use-package scss-mode :defer t)
   #+END_SRC

** Coffee-mode

   #+BEGIN_SRC emacs-lisp
   (use-package coffee-mode
     :defer t
     :config
     (setq coffee-tab-width 2)
     (require 'coffee-evil-extensions)
     (require 'mocha)

     (setq mocha-project-test-directory "frontend/test"
           mocha-environment-variables "NODE_PATH=./frontend/src"
           mocha-options "--watch ./tmp/static.js ./frontend/test/config.coffee"
           mocha-reporter "spec")

     (keys-l :keymaps '(coffee-mode-map js-mode-map)
       "a" 'mocha-test-project
       "t" 'mocha-test-file
       "s" 'mocha-test-at-point)

     (keys :keymaps 'coffee-mode-map
       "o" 'coffee-open-below
       "O" 'coffee-open-above
       "<" 'coffee-indent-shift-left
       ">" 'coffee-indent-shift-right
       "g" (build-keymap
            "m" 'coffee-find-model
            "v" 'coffee-find-component
            "r" 'coffee-find-redux
            "t" 'coffee-find-test)))
   #+END_SRC

** rspec-mode

   #+BEGIN_SRC emacs-lisp
   (use-package rspec-mode
     :defer t
     :init
     (eval-after-load 'rspec-mode '(rspec-install-snippets))
     (keys-l :keymaps 'ruby-mode-map
       "t" 'rspec-verify
       "a" 'rspec-verify-all
       "s" 'rspec-verify-single
       "l" 'rspec-rerun))
   #+END_SRC

** prettier-js

   #+BEGIN_SRC emacs-lisp
   (use-package prettier-js
     :defer t
     :config
     (setq prettier-js-args '("--trailing-comma" "all"))
     :init
     (add-hooks #'prettier-js-mode '(js2-mode-hook js-mode-hook)))
  #+END_SRC

** inf-ruby

   Using pry in rspec buffers
   #+BEGIN_SRC emacs-lisp
   (use-package inf-ruby
     :config
     (add-hook 'after-init-hook 'inf-ruby-switch-setup))
  #+END_SRC

** smartparens

   Close do-end blocks in ruby

   #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :defer t
     :init
     (add-hooks #'smartparens-mode '(coffee-mode-hook ruby-mode-hook js-mode-hook c-mode-common-hook))
     :config
     (require 'smartparens-ruby)
     (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
     (sp-local-pair 'c-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
     (sp-local-pair 'js2-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
     (sp-local-pair 'glsl-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))

     (keys-l "s" (build-keymap
                  "a" 'sp-absorb-sexp
                  "c" 'paredit-convolute-sexp
                  "l" 'sp-forward-slurp-sexp
                  "h" 'sp-forward-barf-sexp
                  "b" 'sp-forward-barf-sexp
                  "B" 'sp-backward-barf-sexp
                  "s" 'sp-foward)))
   #+END_SRC

** glsl-mode

   #+BEGIN_SRC emacs-lisp
   (use-package glsl-mode
     :defer t
     :config
     (add-to-list 'auto-mode-alist '("\\.vert" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.frag" . glsl-mode)))
   #+END_SRC

** flycheck

   #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :defer t
  :init
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc clojure-cider-typed))
  (add-hook 'after-init-hook #'global-flycheck-mode)

  :config
  (use-package flycheck-clojure
    :defer t
    :init
    (eval-after-load 'flycheck '(flycheck-clojure-setup)))

     (use-package flycheck-pos-tip
       :defer t
       :init
       (with-eval-after-load 'flycheck
         (flycheck-pos-tip-mode)))

     (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled))
     (add-hook 'c++-mode-hook
               (lambda ()
                 (setq flycheck-gcc-language-standard "c++14")
                 (setq flycheck-clang-language-standard "c++14"))))
    #+END_SRC

** cider

   #+BEGIN_SRC emacs-lisp
   (use-package cider
     :defer t
     :config
     (setq cider-repl-display-help-banner nil
           cider-repl-pop-to-buffer-on-connect 'display-only)

     (defvar cider-mode-maps
       '(cider-repl-mode-map
         clojure-mode-map
         clojurescript-mode-map))

     (defun reset-dev-system ()
       (interactive)
       (message "Running `(reset)` in current repl")
       (cider-interactive-eval "(dev/reset)"))

     (keys cider-repl-mode-map
       "q" 'delete-window)

     (keys cider-inspector-mode-map
       "<return>" 'cider-inspector-operate-on-point
       "q" 'cider-inspector-pop
       "[p" 'cider-inspector-prev-page
       "]p" 'cider-inspector-next-page)

     (keys :keymaps cider-mode-maps :prefix "g"
       "f" 'cider-find-var
       "v" 'cider-find-cljs
       "b" 'cider-find-clj
       "d" 'cljs-find-card)

     (keys-l :keymaps cider-mode-maps
       "c" (build-keymap
            "a" 'cider-apropos
            "c" 'cider-connect-local
            "d" 'cider-doc
            "i" 'cider-inspect-last-result
            "j" 'cider-jack-in
            "k" 'cider-repl-clear-buffer
            "m" 'cider-macro-expand-1
            "n" 'cider-repl-set-ns
            "q" 'cider-quit
            "r" 'yvh/jump-to-repl
            "R" 'reset-dev-system
            "m" 'cider-macroexpand-1
            "M" 'cider-macroexpand-all)
       "e" 'cider-eval-defun-at-point
       "E" 'cider-eval-buffer
       "t" (build-keymap
            "s" 'cider-test-run-test
            "t" 'cider-test-run-ns-tests
            "f" 'cider-test-rerun-failed-tests
            "l" 'cider-test-rerun-test
            "a" 'cider-test-run-project-tests
            "A" 'cider-auto-test-mode)))
   #+END_SRC

** clj-refactor

   #+BEGIN_SRC emacs-lisp
   (use-package clj-refactor
     :defer t
     :init
     (add-hooks #'clj-refactor-mode '(clojure-mode-hook clojurescript-mode-hook))
     :config
     (let ((cljr-map (make-sparse-keymap)))
       (dolist (details cljr--all-helpers)
         (define-key cljr-map (car details) (cadr details)))
       (keys-l :keymaps 'clojure-mode-map
         "r" cljr-map)))
   #+END_SRC

** rainbow-delimiters

   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters :defer t)
   #+END_SRC

** paredit

   #+BEGIN_SRC emacs-lisp
   (use-package paredit
     :defer t
     :diminish paredit-mode
     :init
     (keys paredit-mode-map
       ")" 'paredit-forward-slurp-sexp
       "(" 'paredit-backward-slurp-sexp))
   #+END_SRC

** aggressive-indent

   #+BEGIN_SRC emacs-lisp
   (use-package aggressive-indent
     :defer t
     :diminish aggressive-indent-mode
     :init
     (add-hooks #'aggressive-indent-mode '(clojure-mode-hook
                                           emacs-lisp-mode-hook
                                           clojurescript-mode-hook)))
   #+END_SRC

** clojure-mode

   #+BEGIN_SRC emacs-lisp
   (use-package clojure-mode
     :diminish eldoc-mode
     :defer t
     :init
     (defun parainbow-mode ()
       (interactive)
       (paredit-mode)
       (evil-cleverparens-mode)
       (rainbow-delimiters-mode)
       (eldoc-mode))

     (add-hooks #'parainbow-mode '(clojure-mode-hook
                                   scheme-mode
                                   clojurescript-mode-hook
                                   cider-repl-mode-hook
                                   emacs-lisp-mode-hook))
     :config
     (setq clojure-indent-style :always-align)
     (dolist (word '(try-let assoc-if transform match facts fact assoc render))
       (put-clojure-indent word 1)))
   #+END_SRC

** projectile

   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :diminish projectile-mode
     :config
     (projectile-global-mode)
     (setq projectile-require-project-root nil
           projectile-switch-project-action 'counsel-projectile-find-file)
     (define-key projectile-command-map (kbd "C") 'projectile-compile-project)
     (define-key projectile-command-map (kbd "c") 'recompile)
     (keys-l
       "p" 'projectile-command-map
       "p T" 'view-test-file-in-other-window)

     (projectile-register-project-type 'clojure '("project.clj")
                                       :test-suffix "_test")

     ;; Projectile-ag
     (use-package ag
       :defer t
       :init (setq ag-reuse-buffers t)))
    #+END_SRC

** neotree

   #+BEGIN_SRC emacs-lisp
   (use-package neotree
     :defer t
     :init (keys-l "n" 'neotree-project-root)
     :config
     ;; Open current file in tree
     (evil-make-overriding-map neotree-mode-map 'normal t)
     (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
     (keys :keymaps '(neotree-mode-map)
       "d" 'neotree-delete-node
       "J" 'neotree-select-down-node
       "K" 'neotree-select-up-node
       "q" 'neotree-hide
       "m" 'neotree-rename-node
       "n" 'neotree-create-node
       "c" 'neotree-copy-node
       "o" 'neotree-enter
       "x" (lambda () (interactive) (neotree-select-up-node) (neotree-enter))
       "<tab>" 'neotree-quick-look))
   #+END_SRC

** ivy

   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :init
     ;; better scoring / result sorting
     (use-package flx)
     :diminish ivy-mode
     :config
     (ivy-mode)
     (setq ivy-display-style nil
           ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                   (t . ivy--regex-fuzzy))
           completing-read-function 'my-ivy-completing-read-with-symbol-def)

     (general-def ivy-minibuffer-map
       "<escape>" 'minibuffer-keyboard-quit
       "<tab>" 'ivy-alt-done
       "S-<tab>" 'ivy-insert-current
       "S-<return>" '(lambda () (interactive) (ivy-alt-done t))
       "C-o" 'ivy-occur)

     ;; Enable leader keys in occur buffer
     (general-def ivy-occur-grep-mode-map "SPC" nil)

     (use-package swiper
       :defer t
       :config (keys "/" 'swiper))

     (use-package counsel-projectile
       :config
       (keys-l
         "f f" 'counsel-projectile-find-file
         "p p" 'counsel-projectile-switch-project))

        (use-package wgrep :defer t))
  #+END_SRC

** projectile-rails

   #+BEGIN_SRC emacs-lisp
   (use-package projectile-rails
     :config
     ;; Won't start unless rails project
     (add-hook 'projectile-mode-hook 'projectile-rails-on)
     ;; (setq projectile-tags-file-name ".git/tags")
     (keys :prefix "g"
       :keymaps  'ruby-mode-map
       "r" 'projectile-rails-find-current-controller
       "R" 'projectile-rails-find-controller
       "f" 'projectile-rails-goto-file-at-point
       "m" 'projectile-rails-find-current-model
       "M" 'projectile-rails-find-model
       "v" 'projectile-rails-find-current-view
       "V" 'projectile-rails-find-view
       "i" 'open-current-ticket-in-redmine
       "t" 'split-window-with-rspec-alternate-file
       "T" 'projectile-rails-find-spec))
   #+END_SRC

** markdown-mode

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :defer t
     :ensure t
     :commands (markdown-mode gfm-mode)
     :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
     :init (setq markdown-command "multimarkdown"))
   #+END_SRC

** org

   #+BEGIN_SRC emacs-lisp
   (use-package org
     :defer t
     :init
     (keys-l 'org-mode-map
       "r" 'org-refile
       "A" 'org-archive-subtree-default-with-confirmation)

     (keys 'org-mode-map
       "t" 'org-todo
       "T" 'org-toggle-checkbox
       "-" 'org-cycle-list-bullet
       "RET" 'org-open-at-point)

     (keys 'org-agenda-mode-map
       "f" 'org-agenda-filter-by-tag)

     :config
     (defconst gtd-dir "~/Dropbox/Documents/gtd")
     (defconst gtd-main (expand-file-name "gtd.org" gtd-dir))
     (defconst gtd-inbox (expand-file-name "inbox.org" gtd-dir))
     (defconst gtd-someday (expand-file-name "someday.org" gtd-dir))

     (add-hook 'org-capture-mode-hook 'evil-insert-state)

     (add-hook 'org-mode-hook '(lambda () (interactive) (org-content 2)))

     (evil-add-hjkl-bindings org-agenda-mode-map 'emacs)

     (setq org-agenda-files `(,gtd-main ,gtd-inbox)
           org-log-done 'time
           org-html-postamble nil
           org-ellipsis "↷")

     (setq org-agenda-custom-commands
           '(("w" "Work stuff" tags-todo "@work"
              ((org-agenda-overriding-header "Work")
               (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

     (setq org-capture-templates `(("t" "Todo [inbox]" entry
                                    (file ,gtd-inbox)
                                    "* TODO %i%?")))

     (setq org-refile-targets '((gtd-main :maxlevel . 1)
                                (gtd-someday :level . 1)))

     (setq org-tags-column 75)

     (use-package org-bullets
       :defer t
       :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (use-package org-evil))
  #+END_SRC
