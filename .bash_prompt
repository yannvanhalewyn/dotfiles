#                                                         .         .
# 8 888888888o   8 888888888o.      ,o888888o.           ,8.       ,8.          8 888888888o 8888888 8888888888
# 8 8888    `88. 8 8888    `88.  . 8888     `88.        ,888.     ,888.         8 8888    `88.     8 8888
# 8 8888     `88 8 8888     `88 ,8 8888       `8b      .`8888.   .`8888.        8 8888     `88     8 8888
# 8 8888     ,88 8 8888     ,88 88 8888        `8b    ,8.`8888. ,8.`8888.       8 8888     ,88     8 8888
# 8 8888.   ,88' 8 8888.   ,88' 88 8888         88   ,8'8.`8888,8^8.`8888.      8 8888.   ,88'     8 8888
# 8 888888888P'  8 888888888P'  88 8888         88  ,8' `8.`8888' `8.`8888.     8 888888888P'      8 8888
# 8 8888         8 8888`8b      88 8888        ,8P ,8'   `8.`88'   `8.`8888.    8 8888             8 8888
# 8 8888         8 8888 `8b.    `8 8888       ,8P ,8'     `8.`'     `8.`8888.   8 8888             8 8888
# 8 8888         8 8888   `8b.   ` 8888     ,88' ,8'       `8        `8.`8888.  8 8888             8 8888
# 8 8888         8 8888     `88.    `8888888P'  ,8'         `         `8.`8888. 8 8888             8 8888

# PROMPT COLORS old -> LGREY="\[\e[0;m\]"
LGREY="\[\e[0;m\]"
BLACK="\[\[\e[0;30m\]\]"
GREY="\[\e[1;30m\]"
RED="\[\e[0;31m\]"
LRED="\[\e[1;31m\]"
GREEN="\[\e[0;32m\]"
LGREEN="\[\e[1;32m\]"
ORANGE="\[\e[0;33m\]"
YELLOW="\[\e[1;33m\]"
BLUE="\[\e[0;34m\]"
LBLUE="\[\e[1;34m\]"
PURPLE="\[\e[0;35m\]"
LPURPLE="\[\e[1;35m\]"
KAKI="\[\e[0;36m\]"
TURQUOISE="\[\e[1;36m\]"
LGREY2="\[\e[0;37m\]"
BEIGE="\[\e[1;37m\]"
NOCOLOR="\[\e[0m\]"

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# PROMPT VALUES
DIR="\W"
GITBRANCH="\$(parse_git_branch)"
PROMPT=" $ "
SUCCESSCOLOR="\`if [ \$? = 0 ]; then echo \[\e[32m\]; else echo \[\e[31m\]; fi\`"

# PS1!
export PS1=$SUCCESSCOLOR$DIR$PURPLE$GITBRANCH$RED$PROMPT$NOCOLOR

# Simple helper function to see the available colors
show_colors() {
  T='gYw'   # The test text

  echo -e "\n                 40m     41m     42m     43m\
     44m     45m     46m     47m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
             '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
             '  36m' '1;36m' '  37m' '1;37m';
    do FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
      do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
    done
    echo;
  done
  echo
}
