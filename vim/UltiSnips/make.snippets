snippet makecpp "A generic c++ makefile layout" b
# Compiler
CC = g++

# Flags
CFLAGS = -c -Wall -std=c++1y
LDLFLAGS =

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin

# Executables
EXEC = main
EXEC := $(addprefix $(BINDIR)/, $(EXEC))

# Sources
SOURCES := $(shell find $(SRCDIR) -name '*.cpp')
HEADERS := $(shell find $(SRCDIR) -name '*.hpp')
OBJECTS := $(SOURCES:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)

$(EXEC): $(OBJECTS)
	@[ -d $(BINDIR) ] || (mkdir $(BINDIR) && echo "made $(BINDIR) dir")
	$(CC) $(LDLFLAGS) $^ -o $@

$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(HEADERS)
	@[ -d $(dir $@) ] || (mkdir -p $(dir $@) && echo "made dir $(dir $@)")
	$(CC) $(CFLAGS) $< -o $@

# Helpers
clean:
	rm -f $(EXEC) $(OBJECTS)

print_vars:
	@echo SOURCES = $(SOURCES)
	@echo OBJECTS = $(OBJECTS)
	@echo HEADERS = $(HEADERS)
	@echo EXEC = $(EXEC)

run: $(EXEC)
	@./$(EXEC)

.PHONY: clean test run print_vars
endsnippet



snippet makejava "A generic java makefile" b
# Compiler
JC = javac

# Directories
SRCDIR = src
CLSSDIR = classes

# Files
MAIN = ${1:Main}

#FLAGS
JFLAGS = -g -deprecation -d $(CLSSDIR)

# Sources
SOURCES := $(shell find $(SRCDIR) -name '*.java')
OBJECTS := $(SOURCES:$(SRCDIR)/%.java=$(CLSSDIR)/%.class)

$(OBJECTS): $(SOURCES)
	@[ -d $(CLSSDIR) ] || mkdir $(CLSSDIR)
	$(JC) $(JFLAGS) $(SOURCES)

# Helpers
clean:
	rm -rf $(CLSSDIR)

print_vars:
	@echo SOURCES = $(SOURCES)
	@echo OBJECTS = $(OBJECTS)

run: $(OBJECTS)
	@java -cp $(CLSSDIR) $(MAIN)

PHONY: clean run print_vars
endsnippet

snippet makepkg "compile and package c++ mac App" b
# Compiler
CC = g++
# Flags
CFLAGS = -c -Wall -std=c++11
LDLFLAGS = # -lSDL2 -lSDL2_mixer -lSDL2_ttf -framework OpenGL -framework CoreFoundation

# Directories
SRCDIR = src
OBJDIR = obj
BINDIR = bin
RSCDIR = Resources

# Executables
EXEC = main
EXEC := $(addprefix $(BINDIR)/, $(EXEC))

# Files
SOURCES := $(shell find $(SRCDIR) -name '*.cpp')
HEADERS := $(shell find $(SRCDIR) -name '*.hpp')
OBJECTS := $(SOURCES:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)
RESOURCES := $(shell find $(RSCDIR) -type f)

# Package
PKGNAME = ${1:App}
PKG := $(PKGNAME).app
PKGCONTENTS := $(PKG)/Contents
PKGEXEC := $(PKGCONTENTS)/MacOS/$(PKGNAME)
PKGRSCDIR := $(PKGCONTENTS)/Resources
PKGRESOURCES := $(RESOURCES:$(RSCDIR)/%=$(PKGRSCDIR)/%)

# ======
# Making
# ======

# Depends on the resources and the executable
$(PKG): $(PKGRESOURCES) $(PKGEXEC)

# Copy all resources not copied yet or updated after last copy, that's what
# make's make (pun intended)
$(PKGRESOURCES): $(PKGRSCDIR)/%: $(RSCDIR)/%
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	cp $< $@

# Copy the executable
$(PKGEXEC): $(EXEC)
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	cp $(EXEC) $(PKGEXEC)

# Link the objects to create a binary executable
$(EXEC): $(OBJECTS)
	@[ -d $(BINDIR) ] || mkdir $(BINDIR)
	$(CC) $(LDLFLAGS) $^ -o $@

# Compile all sources into objects
$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(HEADERS)
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $< -o $@

# =======
# Helpers
# =======
clean:
	rm -f $(EXEC) $(OBJECTS)
	rm -rf $(PKG)

print_vars:
	@echo SOURCES: $(SOURCES)
	@echo OBJECTS: $(OBJECTS)
	@echo HEADERS: $(HEADERS)
	@echo EXEC: $(EXEC)
	@echo RESOURCES: $(RESOURCES) "\n"
	@echo PKGNAME: $(PKGNAME) "\n"
	@echo PKGCONTENTS: $(PKGCONTENTS) "\n"
	@echo PKGEXEDIR: $(PKGEXEDIR) "\n"
	@echo PKGRSCDIR: $(PKGRSCDIR) "\n"
	@echo RESOURCES: $(RESOURCES) "\n"
	@echo PKGRESOURCES: $(PKGRESOURCES) "\n"

# Create/Update and run the binary (Will not create/update the package)
run: $(EXEC)
	@./$(EXEC)

# Create/Update and run the package
run_package: $(PKG)
	@open $(PKG)

.PHONY: clean clean_all print_vars run run_package
endsnippet

snippet makesimplec "A simple makefile for a c program" b
CC=cc
CFLAGS=-Wall -g
SRC=main.c
BUILD=main

$(BUILD): $(SRC)
	$(CC) $(CFLAGS) $< -o $@

run: $(BUILD)
	./$(BUILD)

clean:
	rm $(BUILD)
endsnippet

snippet makec "A complex makefile for a c promgram" b
# Compiler
CC=cc
CFLAGS=-Wall -g

# DIRS
SRCDIR=src
OBJDIR=obj
BINDIR=bin

# Files
SOURCES := $(shell find $(SRCDIR)/*.c)
HEADERS := $(shell find $(SRCDIR)/*.h)
OBJECTS := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
BUILD=main

SRC:=$(SRCDIR)/$(SRC)
BUILD:=$(BINDIR)/$(BUILD)

$(BUILD): $(OBJECTS)
	@[ -d $(BINDIR) ] || (mkdir $(BINDIR) && echo "\n--- made $(BINDIR) dir\n")
	$(CC) $(CFLAGS) $^ -o $@

$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.c $(HEADERS)
	@[ -d $(OBJDIR) ] || (mkdir $(OBJDIR) && echo "\n--- made $(OBJDIR) dir\n")
	$(CC) $(CFLAGS) -c $< -o $@

# =====
# PHONY
# =====
run: $(BUILD)
	./$(BUILD)

clean:
	rm -rf $(BINDIR) $(OBJDIR)

print:
	@echo SOURCES = $(SOURCES)
	@echo HEADERS = $(HEADERS)
	@echo OBJECTS = $(OBJECTS)
	@echo BUILD = $(BUILD)

PHONY: run clean print
endsnippet

snippet makeclib "Makefile for building a static or dynamic library in c" b
# Compiler stuff
CC=cc
CFLAGS=-g -O2 -Wall -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)
LIBS=-ldl $(OPTLIBS)
PREFIX?=/usr/local

# Dirnames
SRCDIR   = src
OBJDIR   = obj
TESTDIR  = tests
BUILDDIR = lib

# Files
SOURCES=$(wildcard $(SRCDIR)/**/*.c $(SRCDIR)/*.c)
OBJECTS=$(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o,$(SOURCES))

TEST_SRC=$(wildcard $(TESTDIR)/*_tests.c)
TESTS=$(patsubst %.c, %,$(TEST_SRC))

LIB_NAME  = YOUR_LIB_NAME
TARGET    = $(BUILDDIR)/lib$(LIB_NAME).a
SO_TARGET = $(patsubst %.a,%.so,$(TARGET))

# The Target Build
all: $(TARGET) $(SO_TARGET) tests

dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra $(OPTFLAGS)
dev: all

$(TARGET): CFLAGS += -fPIC
$(TARGET): $(OBJECTS)
	@[[ -d $(BUILDDIR) ]] || mkdir $(BUILDDIR)
	ar rcs $@ $<
	ranlib $@

$(SO_TARGET): $(OBJECTS)
	@[[ -d $(BUILDDIR) ]] || mkdir $(BUILDDIR)
	$(CC) -shared -o $@ $<

$(OBJECTS): $(OBJDIR)/%.o: $(SRCDIR)/%.c
	@[[ -d $$(dirname $@) ]] || mkdir -p $$(dirname $@)
	$(CC) $(CFLAGS) -c -o $@ $<

# The Unit Tests
.PHONY: tests
tests: CFLAGS += $(TARGET)
tests: $(TESTS)
	sh ./tests/runtests.sh

valgrind:
	VALGRIND="valgrind --log-file=/tmp/valgrind-%p.log" $(MAKE)

# The Cleaner
clean:
	rm -rf $(OBJDIR) $(BINDIR) $(BUILDDIR)
	rm -f $(TESTS) $(TESTDIR)/tests.log
	find . -name "*.gc*" -exec rm {} \;

# The Install
install: all
	install -d $(DESTDIR)/$(PREFIX)/lib/
	install $(TARGET) $(DESTDIR)/$(PREFIX)/lib/

# The Checker
BADFUNCS='[^_.>a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)|stpn?cpy|a?sn?printf|byte_)'
check:
	@echo Files with potentially dangerous functions.
	@egrep $(BADFUNCS) $(SOURCES) || true

print:
	@echo SOURCES     : $(SOURCES)
	@echo OBJECTS     : $(OBJECTS)
	@echo TEST_SRC    : $(TEST_SRC)
	@echo TESTS       : $(TESTS)
	@echo TARGET_NAME : $(TARGET_NAME)
	@echo TARGET      : $(TARGET)
	@echo SO_TARGET   : $(SO_TARGET)
	@echo DESTDIR     : $(DESTDIR)
endsnippet
