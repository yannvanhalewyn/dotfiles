snippet e "expect" b
expect(${1:object}).to.
endsnippet

snippet e! "expect not" b
expect(${1:object}).to.not.
endsnippet

snippet .= "equal" i
.equal(${1:value})
endsnippet

snippet .e "deeply equal" i
.eql(${1:object})
endsnippet

snippet .bt "be true" i
.be.true;
endsnippet

snippet .bn "be null" i
.be.null
endsnippet

snippet .be "be empty" i
.be.empty
endsnippet

snippet .hl "have length of" i
.have.lengthOf(${1:1})
endsnippet

snippet .hp "have property" i
.have.property('${1:name}'${2:, ${3:value}})
endsnippet

snippet .hp. "have property…" i
.have.property('${1:name}').
endsnippet

snippet .hdp "have deep property" i
.have.deep.property('${1:name}'${2:, ${3:value}})
endsnippet

snippet .hdp. "have deep property…" i
.have.deep.property('${1:name}').
endsnippet

snippet .hop "have own property" i
.have.ownProperty('${1:name}'${2:, ${3:value}})
endsnippet

snippet .bi "be instance of" i
.be.an.instanceOf(${1:Array})
endsnippet

snippet .bi. "be instance of…" i
.be.an.instanceOf(${1:Array}).
endsnippet

snippet .t= "that equals" i
.that.equals(${1:object})
endsnippet

snippet .te "that deeply equals" i
.that.eql(${1:object})
endsnippet

snippet .tie "that is empty" i
.that.is.empty
endsnippet

snippet .wl "with length of" i
.with.lengthOf(${1:1})
endsnippet

# ======
# Custom
# ======
snippet desc "A describe block for chai" b
describe ('${1:decription}', function() {
	${2:${VISUAL}}
});
endsnippet

snippet expect "Expect a value to be .." b
expect(${1:value}).${2:to.equal}(${3:expected value});
endsnippet

snippet bef "before each (js)" b
beforeEach(function() {
	${1:${VISUAL}}
});
endsnippet

snippet aft "after each (js)" b
afterEach(function() {
	${1:${VISUAL}}
});
endsnippet

snippet .hbc "sinon-chai have been called" b
.have.been.called();
endsnippet

snippet .hbcw "sinon-chai have been called with" b
.have.been.calledWith(${1:args});
endsnippet
